---
const { title } = Astro.props;
---

<!doctype html>
<html lang="ko">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Lifeworshiper" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="stylesheet" type="text/css" href="/global.css">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
    <div id="root">
		  <slot />
    </div>
	</body>
</html>
<style is:global>
/*   변수가 필요한 경우 여기에 넣어서 쓰자
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
*/
  body {
    width: 100%;
    overflow-x: hidden;
  }
  #root {
    width: 100%;
    overflow: hidden;
  }
  .layer {
    z-index: 0;
  }
  .will-fade-in {
    transition: transform 0.5s ease-in-out, opacity 0.7s ease-in-out;
    transform: transLateY(60px);
    opacity: 0;
    &.after-fade-in {
      transform: translateY(0);
      opacity: 1;
    }
  }
</style>
<script>
  // fade in pbserver init
  const isIntersectingFadeInTarget = (entry) => entry.isIntersecting && entry.target.classList.contains('will-fade-in');
  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (isIntersectingFadeInTarget(entry)) {
        entry.target.classList.add('after-fade-in');
        observer.unobserve(entry.target);
      }
    });
  }, {
    root: null,
    threshold: 0.5,
  });
  const fadeInEls = document.querySelectorAll('.will-fade-in');
  fadeInEls.forEach(target => observer.observe(target));
</script>
